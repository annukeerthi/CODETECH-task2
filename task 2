
1. File Structure

frontend/
├── index.html        # View blog posts
├── create.html       # Create a blog post
├── edit.html         # Edit a blog post
├── delete.html       # Delete a blog post (optional confirmation)
├── styles.css        # Styling for all pages
├── app.js            # JavaScript to interact with the backend

index.html (View Blogs):
html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Blog Posts</title>
</head>
<body>
  <h1>Blog Posts</h1>
  <div id="blog-list"></div>
  <button onclick="window.location.href='create.html'">Create New Blog</button>
  <script src="app.js"></script>
</body>
</html>
create.html (Create Blog Post):
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Create Blog</title>
</head>
<body>
  <h1>Create Blog Post</h1>
  <form id="create-form">
    <label>Title:</label>
    <input type="text" id="title" required>
    <label>Content:</label>
    <textarea id="content" required></textarea>
    <button type="submit">Submit</button>
  </form>
  <script src="app.js"></script>
</body>
</html>
3. JavaScript for Frontend (app.js):
javascript
Copy code
const apiUrl = 'http://localhost:5000/api/blogs';

// Fetch and display blog posts
async function fetchBlogs() {
  const response = await fetch(apiUrl);
  const blogs = await response.json();
  const blogList = document.getElementById('blog-list');
  blogList.innerHTML = blogs
    .map(
      blog => `
    <div>
      <h2>${blog.title}</h2>
      <p>${blog.content}</p>
      <button onclick="editBlog('${blog._id}')">Edit</button>
      <button onclick="deleteBlog('${blog._id}')">Delete</button>
    </div>
  `
    )
    .join('');
}

// Create a new blog post
document.getElementById('create-form')?.addEventListener('submit', async e => {
  e.preventDefault();
  const title = document.getElementById('title').value;
  const content = document.getElementById('content').value;

  await fetch(apiUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ title, content }),
  });
  window.location.href = 'index.html';
});

// Edit blog post
function editBlog(id) {
  // Redirect to edit page with blog ID
  window.location.href = `edit.html?id=${id}`;
}

// Delete blog post
async function deleteBlog(id) {
  await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });
  fetchBlogs();
}

// Fetch blogs on page load
if (document.getElementById('blog-list')) {
  fetchBlogs();
}

Folder Structure:

backend/
├── server.js
├── models/
│   └── Blog.js
├── routes/
│   └── blogRoutes.js
├── .env
Database Model (models/Blog.js):
javascript

const mongoose = require('mongoose');

const BlogSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
});

module.exports = mongoose.model('Blog', BlogSchema);
API Routes (routes/blogRoutes.js):
const express = require('express');
const router = express.Router();
const Blog = require('../models/Blog');

// Fetch all blogs
router.get('/', async (req, res) => {
  const blogs = await Blog.find();
  res.json(blogs);
});

// Create a new blog
router.post('/', async (req, res) => {
  const { title, content } = req.body;
  const newBlog = new Blog({ title, content });
  await newBlog.save();
  res.status(201).json(newBlog);
});

// Update a blog
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { title, content } = req.body;
  const updatedBlog = await Blog.findByIdAndUpdate(id, { title, content }, { new: true });
  res.json(updatedBlog);
});

// Delete a blog
router.delete('/:id', async (req, res) => {
  const { id } = req.params;
  await Blog.findByIdAndDelete(id);
  res.status(204).send();
});

module.exports = router;
Main Server File (server.js):
javascript
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const blogRoutes = require('./routes/blogRoutes');

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.use('/api/blogs', blogRoutes);

mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Database connected');
    app.listen(5000, () => console.log('Server running on port 5000'));
  })
  .catch(err => console.error(err));
Environment Variables (.env):

MONGO_URI=mongodb+srv://keerthiannu37:gQBVvAq2rkoaQvi9@cluster0.3hnzc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0


node server.js
Open index.html in your browser to interact with the frontend.
Test CRUD operations: create, edit, and delete






